다익스트라가 하나의 정점에서 모든 정점까지의 최단경로를 구하는 알고리즘 이었다면

플로이드는 모든 정점에서 모든 정점으로의 최단경로를 구하는 것이다.

2차원 배열을 사용하여 지금까지 계산한 최소 비용을 기록해나간다.


#include <iostream>

using namespace std;

int number = 4;
int INF = 1000000000;
int d[4][4];

//자료 배열을 초기화

int a[4][4] = {
	{0,5,INF,8},
	{7,0,9,INF},
	{2,INF,0,4},
	{INF,INF,3,0}
};

void floyd() {
	for (int i = 0; i < number; i++) {
		for (int j = 0; j < number; j++) {
			d[i][j] = a[i][j];
		}
	}

	//k = 거쳐가는 노드
	for (int k = 0; k < number; k++) {
		//i = 출발 노드
		for (int i = 0; i < number; i++) {
			//j = 도착 노드
			for (int j = 0; j < number; j++) {
				if (d[i][k] + d[k][j] < d[i][j]) {
					d[i][j] = d[i][k] + d[k][j];
				}
			}
		}
	}
	//결과 출력
	for (int i = 0; i < number; i++) {
		for (int j = 0; j < number; j++) {
			cout << d[i][j] << ' ';
		}
		cout << '\n';
	}
}

int main(void) {
	floyd();
}