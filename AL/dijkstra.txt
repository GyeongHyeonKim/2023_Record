#include <iostream>

using namespace std;

int number = 6;
int INF = 1000000000;

//전체 그래프를 초기화

int a[6][6] = {
	{0,2,5,1,INF,INF},
	{2,0,3,2,INF,INF},
	{5,3,0,3,1,5},
	{1,2,3,0,1,INF},
	{INF,INF,1,1,0,2},
	{INF,INF,5,INF,2,0},
};

bool visited[6]; //방문한 노드
int dist[6]; //최단 거리

//가장 최소 거리를 가지는 정점을 반환합니다.
int getSmallIndex() {
	int min = INF;
	int index = 0;
	for (int i = 0; i < number; i++) {
		if (dist[i] < min && !visited[i]) {
			min = dist[i];
			index = i;
		}
	}
	return index;
}

//다익스트라를 수행하는 함수.

void dijkstra(int start) {
	for (int i = 0; i < number; i++) {
		dist[i] = a[start][i];
	}
	visited[start] = true;
	for (int i = 0; i < number - 2; i++) {
		int current = getSmallIndex();
		visited[current] = true;
		for (int j = 0; j < 6; j++) {
			if (!visited[j]) {
				if (dist[current] + a[current][j] < dist[j]) {
					dist[j] = dist[current] + a[current][j];
				}
			}
		}
	}
}

int main(void) {
	dijkstra(0);
	for (int i = 0; i < number; i++) {
		cout << dist[i] << ' ';
	}
}


//위의 코드는 O(N^2)으로 동작하고, 정점의 수가 많고 간선의 수가 적을때 매우 비효율적임


//Heap 을 이용하여 O(N*logN) 으로 구현 



#include <iostream>
#include <vector>
#include <queue>


using namespace std;

int number = 6;
int INF = 1000000000;

vector<pair<int, int>> a[7]; //간선 정보
int d[7]; // 최소 비용

void dijkstra(int start) {
	d[start] = 0;
	priority_queue<pair<int, int>> pq;
	pq.push(make_pair(0,start));
	while (!pq.empty()) {
		int current = pq.top().second;
		//짧은 것이 먼저 오도록 음수화(우선순위 큐가 최대 힙이여서)
		int distance = -pq.top().first;
		pq.pop();
		//이미 최단거리로 갱신된 경우 제외
		if (d[current] < distance)continue;
		for (int i = 0; i < a[current].size(); i++) {
			//선택된 노드의 인접 노드
			int next = a[current][i].second;

			int nextDistance = distance + a[current][i].first;

			if (nextDistance < d[next]) {
				d[next] = nextDistance;
				pq.push(make_pair(-nextDistance,next));
			}
		}
	}
}

int main(void)
{
	for (int i = 1; i <= number; i++) {
		d[i] = INF;
	}
	a[1].push_back(make_pair(2, 2));
	a[1].push_back(make_pair(3, 5));
	a[1].push_back(make_pair(4, 1));

	a[2].push_back(make_pair(1, 2));
	a[2].push_back(make_pair(3, 3));
	a[2].push_back(make_pair(4, 2));

	a[3].push_back(make_pair(1, 5));
	a[3].push_back(make_pair(2, 3));
	a[3].push_back(make_pair(4, 3));
	a[3].push_back(make_pair(5, 1));
	a[3].push_back(make_pair(6, 5));

	a[4].push_back(make_pair(1, 2));
	a[4].push_back(make_pair(2, 2));
	a[4].push_back(make_pair(3, 3));
	a[4].push_back(make_pair(5, 1));

	a[5].push_back(make_pair(3, 1));
	a[5].push_back(make_pair(4, 1));
	a[5].push_back(make_pair(6, 2));

	a[6].push_back(make_pair(3, 5));
	a[6].push_back(make_pair(5, 2));

	dijkstra(1);

	for (int i = 1; i <= number; i++) {
		cout << d[i] << " ";
	}
}