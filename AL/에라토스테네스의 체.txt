#include <iostream>


using namespace std;

int number = 100000;
int a[100001];

//기존 소수판별 알고리즘

//bool isPrimeNumber(int x) {
//	for (int i = 2; i < x; i++) {
//		if (x % i == 0)return false;
//	}
//	return true;
//}
//
//시간복잡도 O(N) 으로 느리다
//모든 약수는 대칭을 이룬다는 점에 주목하여 새로 작성하면
//
//bool is PrimeNumber(int x) {
//	for (int i = 2; i <= sqrt(x); i++) {
//		if (x % i == 0)return false;
//	}
//	return true;
//}

//에라토스테네스의 체 코드
//대량의 소수판별을 빠르게 할 수 있다.
void primeNumberSieve() {
	for (int i = 2; i <= number; i++) {
		a[i] = i;
	}
	for (int i = 2; i <= number; i++) {
		if (a[i] == 0)continue;
		for (int j = i + i; j <= number; j += i) {
			a[j] = 0;
		}
	}
	for (int i = 2; i <= number; i++) {
		if (a[i] != 0) {
			cout << a[i] << ' ';
		}
	}
}


int main(void) {
	primeNumberSieve();
}